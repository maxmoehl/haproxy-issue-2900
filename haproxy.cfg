global
    nbthread 4
    log stdout len 8192 format local syslog debug
    stats socket /tmp/haproxy.sock mode 600 expose-fd listeners level admin
    stats timeout 2m

    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-server-options no-tls-tickets force-tlsv12

    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options no-tls-tickets ssl-min-ver TLSv1.2 ssl-max-ver TLSv1.3

defaults
    log global
    option log-health-checks
    option log-separate-errors
    maxconn 500000
    option http-server-close
    option httplog
    option forwardfor
    option contstats
    timeout connect         30000ms
    timeout client          960000ms
    timeout server          3660000ms
    timeout tunnel          3600000ms
    timeout http-keep-alive 60000ms
    timeout http-request    90000ms
    timeout queue           30000ms

listen stats
    mode http
    bind *:9000
    stats enable
    stats refresh 10s
    stats admin if TRUE
    stats uri /haproxy_stats

listen health_check_http_url
    bind :8080
    mode http
    monitor-uri /health
    acl http-routers_down nbsrv(http-routers-http1) eq 0
    monitor fail if http-routers_down
    monitor fail if { stopping }

# generate a resolver that is based on the information in /etc/resolv.conf which is populated by docker
resolvers dns
    parse-resolv-conf

frontend http-in
    mode http
    bind :80
    redirect scheme https code 301

frontend https-in
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r %[fc_err]/%[ssl_fc_err,hex]/%[ssl_c_err]/%[ssl_c_ca_err]/%[ssl_fc_is_resumed] %[ssl_fc_sni]/%sslv/%sslc"
    mode http
    bind :443 ssl crt-list /usr/local/etc/haproxy/crt-list

    http-request set-header X-Forwarded-Client-Cert %[ssl_c_der,base64]          if { ssl_c_used }
    http-request set-header X-SSL-Client            %[ssl_c_used]                if { ssl_c_used }
    http-request set-header X-SSL-Client-Session-ID %[ssl_fc_session_id,hex]     if { ssl_c_used }
    http-request set-header X-SSL-Client-Verify     %[ssl_c_verify]              if { ssl_c_used }
    http-request set-header X-SSL-Client-NotBefore  %{+Q}[ssl_c_notbefore]       if { ssl_c_used }
    http-request set-header X-SSL-Client-NotAfter   %{+Q}[ssl_c_notafter]        if { ssl_c_used }
    http-request set-header X-SSL-Client-Subject-DN %{+Q}[ssl_c_s_dn,base64]     if { ssl_c_used }
    http-request set-header X-SSL-Client-Subject-CN %{+Q}[ssl_c_s_dn(cn),base64] if { ssl_c_used }
    http-request set-header X-SSL-Client-Issuer-DN  %{+Q}[ssl_c_i_dn,base64]     if { ssl_c_used }
    http-request set-header X-SSL-Client-Root-CA-DN %{+Q}[ssl_c_r_dn,base64]     if { ssl_c_used }

    default_backend http-routers-http1

# Backend shouldn't matter.
backend http-routers-http1
    mode http
    balance roundrobin
    option srvtcpka
    no option http-server-close
    http-reuse safe
    option prefer-last-server

    # this generates 10 backends and fills them as they appear on the (docker) DNS
    server-template node 10 router:443 resolvers dns init-addr none check inter 1000 port 9001 fall 3 rise 2 ssl verify required ca-file /usr/local/etc/haproxy/ca.crt.pem alpn http/1.1
